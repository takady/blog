---
layout: post
title: "自分の開発スピードを上げるには"
date: 2016-05-02 01:10:20 +0900
comments: true
categories: 
---

最近、新しい機能なりサービスをいくつか作ったりしている中で、振り返ってみると、なんかもっと上手くやれた気がするなーって思うことがある。  
そもそも気をつけているポイント/気をつけたいポイントについて改めて自分の考えをまとめてみたい。  
あくまで私見。  

自分はどこを改善できるだろうか。  
もっと早く、質の良いものを作るにはどうすれば良いのか。  

# 仕様決め
- それを作る理由について納得しているか
  - 納得してないとか、そもそも背景を理解してない状態で仕様決めに入るのはかなり厳しい。
  - システムとしてだけでなくて、ビジネス的にそれってどうなんですかっていうのは質問して納得しておきたい。
    - とはいえ腰の重い開発者にはなりたくないので柔軟に。

- 解決したい課題が明確になっているか
  - 最初は何か課題があるはずだけど、それをすっ飛ばして具体的な解決方法から話が始まる事がたまにある。
    - 課題を解決する方法として実は別の方法の方が良かったりするかもしれないので、解決したい課題は何なのかは明確にしておきたい。

- 誰が仕様を決めるのか
  - 発散はしても良いけど最後決める人がいないとなかなか固まらなくて MTG の時間だけが長くなる。
  - 特に関係者が増えると本当に決まらないので、誰が決める人なのかってのはちゃんと認識合わせておきたい。

- 優先度の高いものはどれか
  - 規模が小さければ一気に作っちゃうのだけど、規模が大きい場合は一気に全部作ろうとしないで重要なものから作って出来たところから出していった方が大抵良い。
  - 優先度の低いものは本当に必要かもわかってなかったりするので最初から詳細まで詰めない。
  - いつまでにどこまで出したいかは確認しておく。

- そもそも現状の仕様がどうなっているかをシステムレベルで把握しているか
  - そもそもの前提が間違っていたりすると議論が全くの無駄になることも。
  - 把握してない状態で課題に対しての解決案を提示するのは結構難しい。


# 設計
- 既存に引っ張られすぎていないか
  - 既存がこうだからそれを踏襲していく形で考えてしまいがちだが、そこに縛られすぎずに本来どうあるべきかを考えてみる。
    - 時間的制約などにより結果的に理想の形を取れなくても、チーム内で理想の形は共有しておきたい。

- システム全体の世界観を壊さないか
  - 「既存に引っ張られすぎてないか」と相反しそうだが、全体の世界観に対して唐突すぎたり、責務を超えた事をやらせていたり、隠蔽しておきたい知識・概念がその範囲外に流出してしまうのは避けたい。
    - ここが結構難しい。
      - あしがかりになりそうな DDD の知識を学びたい。

- 名前付けに紛糾していないか
  - 結構みんなで悩むことがあるんだけど、これは何かのサインなのか。


# 実装
- 集中できているか
  - とにかく実装は集中してやっているかどうかで掛かる時間が何倍も変わるので、自分が集中している状態にい続けられるように気を遣う。
  - 設計がバッチリはまっていれば実装はわりと迷いなくコードにしていける。
    - というか設計のタイミングで実装を考えざるを得ないところがある。それが良いのか悪いのかはわからない。
  - 詳細な実装方法で迷ったりする時は実際に書いて見比べる方がイメージしやすくて、書いたコードを見てみると意外と悪くないねという感じになる事が多い。

- テストコードを書く事に時間がかかってないか
  - プロダクションコード書くよりテストコード書く時間の方が長くなりがち。
    - ここはもう少し改善できそう。
    - テストの体系だった方法について何か一冊本でも読んで学ぶと良さそう。

- コードレビューしやすい PR になっているか
  - レビュアーが気になりそうなポイントは、先に PR の Description に書いておく。
    - ただ、Description が長過ぎると重い感じになるので、コードやコミットメッセージなどで明らかにわかることは書かないことにしてる。
  - 1つの PR が大きくなり過ぎたら分けられないか考える。
    - 1つの PR でだいたい変更が 200行くらいまでにした方が見やすくてレビュアーの負担も少ないと思う。
  - 意味の単位でコミット分けて、コミットメッセージ書く。
    - 将来 commit log 見直した時に意図がわかって最高。
    - コミット単位で見てくれる人もいるかもしれないので、その人に向けて伝えるイメージで。
      - 1行目: 要約
      - 2行目: 空行
      - 3行目: 理由含めた説明

- リリースタイミングを考えられているか
  - なるべく出来たものから出していきたい。
  - db migration があるものはタイミング気をつける。


# 検証
- 検証環境特有の問題を取り除けているか
  - 大体時間が掛かるのは、実際に検証したい箇所ではなくて、何か設定の差異等によるつまらない問題である事が多い。
    - 特に他チームのサービスとのインターフェース部分でこの問題はよく起きる。
      - そういう問題は起きないように改善するのはもちろんだし、認識してるのであれば事前に取り除いておきたい。


# まとめ
改めてまとめてみると、改善できそうなところが見えてきた気がする。  
特に設計については、自分の哲学というか考え方の軸を持ってると議論しやすいのでそこをもっと強くしていきたい。DDD の本とテストの本を読まねば。  
